git checkout 1-FirstBuild
>Command
build

cmd
code

git checkout 2-Tests

open src\FSharp.ProjectTemplate\Library.fs

let inline factorial n = 
  [ 1 .. n ]
  |> Seq.reduce (*) 
  
Try
Library.factorial in fsi


set .Net Framework to 4.5
<TargetFrameworkVersion>v4.5</TargetFrameworkVersion>

.paket\paket.exe add nuget FsUnit version 1.4.1 group Test project TicTacToeProvider.Tests

open tests\TicTacToeProvider.Tests\Tests.fs

[<Test>]
let ``Factorial of 0 returns 1`` () = 
  let result = Library.factorial 0
  result |> should equal 1

let facTimes5 = factorial 5 (*) 5

Edit Library.fs

  let inline tryFactorial n = 
    match n with
      | n when n < 0 -> None
      | n when n = 0 -> 1
      | n -> [ 1 .. n ] |> Seq.reduce (*) |> Some
 

Change to      | n when n = 0 -> Some 1 
Try 
  let facTimes5 = tryFactorial 0 |> Option.map (fun x -> x * 5) |> Option.iter (printfn "%A") 
  let facTimes5 = tryFactorial 0 |> Option.map ((*) 5) |> Option.iter (printfn "%A") 
 
Edit tests\TicTacToeProvider.Tests\Tests.fs
[<Test>]
let ``Factorial of 0 returns 1`` () = 
  let result = Library.tryFactorial 0
  result |> should equal (Some 1)
  
[<Test>]
let ``Factorial of 5 returns 120`` () = 
  let result = Library.tryFactorial 5
  result |> should equal (Some 120)
  
[<Test>]
let ``Factorial of -1 is none`` () = 
  Library.tryFactorial -1 |> should equal None
 

// // Use LanguagePrimitives.GenericZero and LanguagePrimitives.GenericOne in tryFactorial to enable any type that has a Zero, One

// let inline tryFactorial n = 
//   match n with
//     | n when n < LanguagePrimitives.GenericZero -> None
//     | n when n = LanguagePrimitives.GenericZero -> Some LanguagePrimitives.GenericOne
//     | n -> [ LanguagePrimitives.GenericOne .. n ] |> Seq.reduce (*) |> Some

// [<Test>]
// let ``Factorial of bigint 120 returns 6.689502913 E+198`` () = 
//  let result = tryFactorial 120I
//  result |> should equal (Some 6689502913449127057588118054090372586752746333138029810295671352301633557244962989366874165271984981308157637893214090552534408589408121859898481114389650005964960521256960000000000000000000000000000I)

// //tryFactorial bacon?  
// type Bacon = Uncooked | Crispy | Chewy | Little of Bacon | Lots of Bacon 
//   with static member get_Zero() = Uncooked
//        static member get_One() = Chewy
//        static member (*) (x,y) = Lots x
//        static member (+) (x,y) = Little x
  
// let result = tryFactorial Chewy
// let result2 = tryFactorial 120I

build

git checkout 3-Docs
build KeepRunning
chrome file:///C:/Users/diese/Source/Repos/Meetup-FSharp-Primer-TypeProvider/docs/output/index.html
open index.fsx
Change path to : 
  #r "TicTacToeProvider/TicTacToeProvider.dll"
open tutorial.fsx
Change path to : 
  #r "TicTacToeProvider/TicTacToeProvider.dll"
  
open index.fsx - Change to:

let libresult = Library.hello 10
printfn "hello = %i" libresult 

let result = Library.tryFactorial 5 |> Option.get 

open generate.fsx - add 
let fsiEvaluator = lazy (Some (FsiEvaluator() :> IFsiEvaluator))
add 
        ?fsiEvaluator = fsiEvaluator.Value  
to end of both  Literate.ProcessDirectory

open index.fsx - add

(*** define-output:test ***)
Library.hello 10
|> printfn "hello = %i" 

(** The result of the previous snippet is: *)
(*** include-output:test ***)

build KeepRunning

add the following and refresh

let result = Library.tryFactorial 5 |> Option.get 

(** And the variable `result` has the following value: *)
(*** include-value: result ***)

Open Library.fs - add

  /// ## Example
  ///
  ///     let facTimes5 = tryFactorial 0 |> Option.map ((*) 5) |> Option.iter (printfn "%A") 
  ///     printfn "%A" facTimes5
  ///
  /// Returns n! or n*n-1*n-2... where n >= 0
  /// ## Parameters
  ///  - `n` - parameter to factorial
  ///
  
  //build GenerateReferenceDocs
  build ReleaseDocs

chrome http://kellerd.github.io/TicTacToeProvider/
  
git checkout 3-Paket