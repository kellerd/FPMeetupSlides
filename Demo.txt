git checkout 1-FirstBuild
>Command
build

cmd
code

git checkout 2-Tests

open src\FSharp.ProjectTemplate\Library.fs

let inline factorial n = Seq.reduce (*) [ LanguagePrimitives.GenericOne .. n ]

set .Net Framework to 4.5
<TargetFrameworkVersion>v4.5</TargetFrameworkVersion>

.paket\paket.exe add nuget FsUnit version 1.4.1 group Test project TicTacToeProvider.Tests

open tests\TicTacToeProvider.Tests\Tests.fs

[<Test>]
let ``Factorial of 0 returns 1`` () = 
  let result = Library.factorial 1
  result |> should equal 1

Edit Library.fs

  let inline factorial n = 
      match n with
      | n when n < LanguagePrimitives.GenericZero -> invalidArg "n" "n must be > or = to 0"
      | n -> Seq.reduce (*) [ LanguagePrimitives.GenericOne .. n ]
 
[<Test>]
let ``Factorial of bigint 120 returns 6.689502913 E+198`` () = 
  let result = Library.factorial 120I
  result |> should equal 6689502913449127057588118054090372586752746333138029810295671352301633557244962989366874165271984981308157637893214090552534408589408121859898481114389650005964960521256960000000000000000000000000000I

build

[<Test>]
let ``Factorial of -1 returns ~our client says this is out of scope~`` () = 
  let result = Library.factorial -1
  result |> should equal 1


let wrap f x = fun () -> f x |> ignore
[<Test>]
let ``Factorial of -1 throws exception`` () = 
  wrap (Library.factorial) -1 |> should (throwWithMessage "n must be > or = to 0\r\nParameter name: n") typeof<System.ArgumentException>

build

git checkout 3-Docs
build KeepRunning
firefox C:\Users\KELLERD\Documents\GitHub\Meetup-FSharp-Primer-TypeProvider\docs\output\index.html